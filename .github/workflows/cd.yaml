name: CD

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch: {}
  push:
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

  HELM_REPO: "oci://ghcr.io/${{ github.repository }}/charts"

  GO_VERSION: 1.21.3

  GOPRIVATE: 'github.com/meln5674/*'

  COSIGN_VERSION: v1.13.0

  YQ_VERSION: v4.27.2

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '${{ env.GO_VERSION }}'

      # Install Deps
      - name: Install Dependencies
        run: |
          make -j mods build-tools

      # Run Linter
      - name: Lint chart
        run: |
          ./bin/helm dependency update ./deploy/helm/nodeport-loadbalancer
          ./bin/helm lint ./deploy/helm/nodeport-loadbalancer
      - name: Lint code
        run: |
          make vet

      # Tests
      - name: E2E Tests
        run: |
          make e2e IS_CI=1
      

  docker:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: '${{ env.COSIGN_VERSION }}'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      - uses: actions/setup-go@v4
        with:
          go-version: '${{ env.GO_VERSION }}'

      # Configuration/metdata

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get Tag
        id: tagName
        uses: olegtarasov/get-tag@v2.1

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long,prefix=



      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and Push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
  helm:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Get Tag
        id: tagName
        uses: olegtarasov/get-tag@v2.1

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"


      # Install Deps
      - name: Install Dependencies
        run: |
          make helm

      - name: Install YQ
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: '${{ env.YQ_VERSION }}'

      # Release charts
      - name: Push Charts
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          set -x

          PATH=${PWD}/bin/:${PATH}

          helm registry login "${REGISTRY}" -u "${GITHUB_ACTOR}" -p "${GITHUB_TOKEN}"

          GIT_TAG="${{ steps.tagName.outputs.tag }}"
          CHART_APPVERSION="${GIT_TAG:-${GITHUB_SHA}}"
          if [ -n "${GIT_TAG}" ]; then
            NEW_VERSION_EXPR='"'"${GIT_TAG}"'"'
          else
            NEW_VERSION_EXPR='.version + "-'"${GITHUB_SHA}"'"'
          fi
          mkdir -p deploy/helm
          yq -i '.version = '"${NEW_VERSION_EXPR}"'' "deploy/helm/nodeport-loadbalancer/Chart.yaml"
          yq -i '.appVersion = "'"${CHART_APPVERSION}"'"' "deploy/helm/nodeport-loadbalancer/Chart.yaml"
          helm dependency update deploy/helm/nodeport-loadbalancer
          helm package deploy/helm/nodeport-loadbalancer/ --destination bin
          helm push bin/nodeport-loadbalancer-*.tgz "${HELM_REPO}"

